#!/usr/bin/env bash
# Helper to run `terraform apply` with optional safety checks and pre-generated plans.
# Usage:
#   ./run_terraform_apply.sh <environment> [--plan-file path] [--var-file path] [--auto-approve]
# Environment variables:
#   TF_VARS_FILE             Override the detected tfvars file for the environment.
#   TF_BACKEND_CONFIG_FILE   Path to a backend config file to pass to `terraform init`.
#   TF_PLAN_ARGS             Extra arguments supplied to `terraform plan` when generating a plan.
#
# If a --plan-file is provided the script assumes the plan already exists and will
# run `terraform apply` directly against it (after ensuring `terraform init`).
# Otherwise it will generate a plan, write the plan & human-readable summary, and
# prompt for confirmation unless --auto-approve is supplied (required for CI).

set -euo pipefail

usage() {
  cat <<'EOF'
Usage: run_terraform_apply.sh <environment> [options]

Options:
  --plan-file <path>   Use an existing plan file generated by `terraform plan`.
  --var-file <path>    Override the tfvars file detection.
  --auto-approve       Skip interactive approval (needed for CI workflows).
  -h, --help           Show this help message.

Environment variables:
  TF_VARS_FILE             Alternate way to set --var-file.
  TF_BACKEND_CONFIG_FILE   Optional Terraform backend config to pass to `terraform init`.
  TF_PLAN_ARGS             Additional arguments passed to `terraform plan` when creating a plan.
EOF
}

if [[ $# -lt 1 ]]; then
  usage
  exit 64
fi

ENVIRONMENT="$1"
shift || true

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="${SCRIPT_DIR}/../terraform/environments/${ENVIRONMENT}"

if [[ ! -d "${TERRAFORM_DIR}" ]]; then
  echo "Environment directory '${TERRAFORM_DIR}' does not exist." >&2
  exit 1
fi

AUTO_APPROVE="false"
PLAN_FILE_INPUT=""
VAR_FILE="${TF_VARS_FILE:-}"
declare -a APPLY_ARGS=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    --plan-file)
      if [[ $# -lt 2 ]]; then
        echo "--plan-file expects a path argument" >&2
        exit 64
      fi
      PLAN_FILE_INPUT="$2"
      shift 2
      ;;
    --var-file)
      if [[ $# -lt 2 ]]; then
        echo "--var-file expects a path argument" >&2
        exit 64
      fi
      VAR_FILE="$2"
      shift 2
      ;;
    --auto-approve)
      AUTO_APPROVE="true"
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      APPLY_ARGS+=("$1")
      shift
      ;;
  esac
done

resolve_plan_path() {
  local input="$1"
  if [[ -z "${input}" ]]; then
    return 1
  fi
  if [[ -f "${input}" ]]; then
    (cd "$(dirname "${input}")" && pwd)/"$(basename "${input}")"
    return 0
  fi
  if [[ -f "${TERRAFORM_DIR}/${input}" ]]; then
    (cd "${TERRAFORM_DIR}" && pwd)/"${input}"
    return 0
  fi
  return 1
}

determine_var_file() {
  if [[ -n "${VAR_FILE}" ]]; then
    echo "${VAR_FILE}"
    return
  fi

  local candidates=(
    "${TERRAFORM_DIR}/${ENVIRONMENT}.tfvars"
    "${TERRAFORM_DIR}/${ENVIRONMENT}.auto.tfvars"
    "${TERRAFORM_DIR}/../../${ENVIRONMENT}.tfvars"
    "${TERRAFORM_DIR}/../../${ENVIRONMENT}.auto.tfvars"
    "${TERRAFORM_DIR}/${ENVIRONMENT}.tfvars.example"
    "${TERRAFORM_DIR}/../../${ENVIRONMENT}.tfvars.example"
    "${TERRAFORM_DIR}/generated.auto.tfvars"
  )

  for candidate in "${candidates[@]}"; do
    if [[ -f "${candidate}" ]]; then
      echo "${candidate}"
      return
    fi
  done

  echo ""
}

PLAN_FILE_RESOLVED=""
if [[ -n "${PLAN_FILE_INPUT}" ]]; then
  if ! PLAN_FILE_RESOLVED="$(resolve_plan_path "${PLAN_FILE_INPUT}")"; then
    echo "Plan file '${PLAN_FILE_INPUT}' not found." >&2
    exit 2
  fi
fi

VAR_FILE_PATH=""
if [[ -z "${PLAN_FILE_RESOLVED}" ]]; then
  VAR_FILE_PATH="$(determine_var_file)"
  if [[ -z "${VAR_FILE_PATH}" ]]; then
    cat >&2 <<EOF
Unable to locate a tfvars file for environment '${ENVIRONMENT}'.
Set TF_VARS_FILE / --var-file or add one of the expected files.
EOF
    exit 3
  fi

  if [[ "${VAR_FILE_PATH}" == *".tfvars.example" ]]; then
    echo "⚠️  Using example variables file '${VAR_FILE_PATH}'. Replace with production credentials before applying." >&2
  fi
fi

pushd "${TERRAFORM_DIR}" >/dev/null

INIT_ARGS=("-upgrade")
if [[ -n "${TF_BACKEND_CONFIG_FILE:-}" ]]; then
  if [[ ! -f "${TF_BACKEND_CONFIG_FILE}" ]]; then
    echo "Backend config file '${TF_BACKEND_CONFIG_FILE}' not found." >&2
    popd >/dev/null
    exit 4
  fi
  INIT_ARGS+=("-backend-config=${TF_BACKEND_CONFIG_FILE}")
fi

terraform init "${INIT_ARGS[@]}"

PLAN_FILE="${PLAN_FILE_RESOLVED}"
SUMMARY_FILE=""

if [[ -z "${PLAN_FILE}" ]]; then
  PLAN_FILE="plan-${ENVIRONMENT}.tfplan"
  SUMMARY_FILE="plan-${ENVIRONMENT}.txt"

  PLAN_ARGS=()
  if [[ -n "${TF_PLAN_ARGS:-}" ]]; then
    # shellcheck disable=SC2206
    PLAN_ARGS=(${TF_PLAN_ARGS})
  fi

  terraform plan \
    -input=false \
    -var-file="${VAR_FILE_PATH}" \
    -out="${PLAN_FILE}" \
    "${PLAN_ARGS[@]}"

  terraform show -no-color "${PLAN_FILE}" > "${SUMMARY_FILE}"
  echo "Terraform plan written to ${TERRAFORM_DIR}/${PLAN_FILE}"
  echo "Plan summary written to ${TERRAFORM_DIR}/${SUMMARY_FILE}"

  if [[ "${AUTO_APPROVE}" != "true" ]]; then
    if [[ -n "${CI:-}" ]]; then
      echo "CI environment detected but --auto-approve not supplied; refusing to continue." >&2
      popd >/dev/null
      exit 5
    fi
    read -r -p "Apply this plan? [y/N] " response
    case "${response}" in
      [yY][eE][sS]|[yY]) ;;
      *) echo "Aborting apply."; popd >/dev/null; exit 0 ;;
    esac
  fi

  PLAN_FILE="$(resolve_plan_path "${PLAN_FILE}")"
fi

APPLY_CMD=("terraform" "apply")
if [[ "${AUTO_APPROVE}" == "true" ]]; then
  APPLY_CMD+=("-auto-approve")
fi
APPLY_CMD+=("${PLAN_FILE}" "${APPLY_ARGS[@]}")

"${APPLY_CMD[@]}"

popd >/dev/null

echo "Terraform apply completed using plan '${PLAN_FILE}'."
